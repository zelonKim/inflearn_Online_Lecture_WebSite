// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?   @map("hashed_password")
  image          String?
  bio            String?

  accounts Account[]
  sessions Session[]
  courses  Course[]
  courseEnrollments CourseEnrollment[]
  courseReviews CourseReview[]
  courseQuestions CourseQuestion[]
  courseComments CourseComment[]
  lectureActivities LectureActivity[]
  courseFavorites CourseFavorite[]

  cartItems CartItem[]
  orders Order[]

  @@map("users")
}



model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}








model Course {
  id String @id @default(uuid())
  slug String @unique
  title String
  shortDescription String? @map("short_description")
  description String? @map("description")
  thumbnailUrl String? @map("thumbnail_url")
  price Int? @default(0)
  discountPrice Int? @map("discount_price")
  level String @default("BEGINNER")
  status String @default("DRAFT")
  instructorId String @map("instructor_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sections Section[]
  lectures Lecture[]
 
  categories CourseCategory[]
  enrollments CourseEnrollment[]
  reviews CourseReview[]
  questions CourseQuestion[]
  favorites CourseFavorite[]
  lectureActivities LectureActivity[]

  instructor User @relation(fields: [instructorId], references:[id])

  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("courses")
}


model Section {
  id String @id @default(uuid())
  title String
  description String?
  order Int 
  courseId String @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id], onDelete:Cascade)  
  lectures Lecture[]
}


model Lecture {
  id String @id @default(uuid())
  title String 
  description String?
  order Int
  duration Int?
  isPreview Boolean @default(false) @map("is_preview")
  sectionId String @map("section_id")
  courseId String @map("course_id")
  videoStorageInfo Json? @map("video_storage_info")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  section Section @relation(fields: [sectionId], references: [id], onDelete:Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete:Cascade)
  activities LectureActivity[]

  @@map("lectures")
}


model CourseCategory {
  id String @id @default(uuid())
  name String
  slug String @unique
  description String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  courses Course[]

  @@map("course_categories")
}

model CourseEnrollment {
  id String @id @default(uuid())
  userId String @map("user_id")
  courseId String @map("course_id")
  enrolledAt DateTime @default(now()) @map("enrolled_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id], onDelete:Cascade)
  user User @relation(fields: [userId], references:[id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_enrollments")
}



model CourseReview {
  id String @id @default(uuid())
  content String
  rating Int
  userId String @map("user_id")
  courseId String @map("course_id")
  instructorReply String? @map("instructor_reply")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id], onDelete:Cascade)
  user User @relation(fields: [userId], references:[id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_reviews")
}



model CourseQuestion {
  id String @id @default(uuid())
  title String
  content String
  userId String @map("user_id")
  courseId String @map("course_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id], onDelete:Cascade)
  user User @relation(fields: [userId], references:[id], onDelete: Cascade)
  comments CourseComment[]

  @@map("course_questions")
}


model CourseComment {
  id String @id @default(uuid())
  content String
  userId String @map("user_id")
  questionId String @map("question_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  question CourseQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references:[id], onDelete: Cascade)

  @@map("course_comments")
}


model CourseFavorite {
  id String @id @default(uuid())
  userId String @map("user_id")
  courseId String @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references:[id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_favorite")
}


model LectureActivity {
  id String @id @default(uuid())
  userId String @map("user_id")
  lectureId String @map("lecture_id")
  courseId String @map("course_id")
  progress Int @default(0)
  duration Int @default(0)
  isCompleted Boolean @default(false) @map("is_completed")
  lastWatchedAt DateTime @default(now()) @map("last_watched_at")
  
  user User @relation(fields: [userId], references:[id], onDelete: Cascade)
  course Course @relation(fields:[courseId], references: [id], onDelete: Cascade)
  lecture Lecture @relation(fields: [lectureId], references:[id], onDelete: Cascade)

  @@unique([userId, courseId, lectureId])
  @@map("lecture_activities")
}


model CartItem {
  id String @id @default(uuid())
  userId String @map("user_id")
  courseId String @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references:[id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references:[id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("cart_items")
}


model Order {
  id String @id @default(uuid())
  orderNumber String @unique @map("order_number")
  userId String @map("user_id")
  totalAmount Int @map("total_amount")
  discountAmount Int @default(0) @map("discount_amount")
  finalAmount Int @map("final_amount")
  status String @default("PENDING")
  customerName String? @map("customer_name")
  customerEmail String? @map("customer_email")
  customerPhone String? @map("customer_phone")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references:[id], onDelete: Cascade)

  orderItems OrderItem[]
  payments Payment[]

  @@map("orders")
}




model OrderItem {
  id String @id @default(uuid())
  orderId String @map("order_id")
  courseId String @map("course_id")
  courseName String @map("course_name")
  originalPrice Int @map("original_price")
  discountPrice Int @map("discount_price")
  finalPrice Int @map("final_price")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order Order @relation(fields:[orderId], references: [id], onDelete: Cascade)
  course Course @relation(fields:[courseId], references: [id], onDelete: Cascade)

  @@map("order_items")
}


model Payment {
  id String @id @default(uuid())
  paymentId String @unique @map("payment_id")
  orderId String @map("order_id")
  transactionId String @map("transaction_id")
  amount Int @map("amount")
  currency String @default("KRW")
  paymentMethod String @map("payment_method")
  pgProvider String? @map("pg_provider")
  status String @default("READY")
  failureReason String? @map("failure_reason")
  paidAt DateTime? @map("paid_at")
  cancelledAt DateTime? @map("cancelled_at")

  virtualAccountNumber String? @map("virtual_account_number")
  virtualAccountBank String? @map("virtual_account_bank")
  virtualAccountHolder String? @map("virtual_account_holder")
  virtualAccountExpiry String? @map("virtual_account_expiry")

  portoneData Json? @map("portone_data")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

