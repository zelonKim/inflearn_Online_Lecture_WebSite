// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AppControllerGetHelloData, AppControllerGetHelloResponses, AppControllerTestUserData, AppControllerTestUserResponses, CoursesControllerFindAllData, CoursesControllerFindAllResponses, CoursesControllerCreateData, CoursesControllerCreateResponses, CoursesControllerDeleteData, CoursesControllerDeleteResponses, CoursesControllerFindOneData, CoursesControllerFindOneResponses, CoursesControllerUpdateData, CoursesControllerUpdateResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetHelloResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const appControllerTestUser = <ThrowOnError extends boolean = false>(options?: Options<AppControllerTestUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerTestUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user-test',
        ...options
    });
};

export const coursesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/courses',
        ...options
    });
};

export const coursesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const coursesControllerDelete = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CoursesControllerDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}',
        ...options
    });
};

export const coursesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/courses/{id}',
        ...options
    });
};

export const coursesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CoursesControllerUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};