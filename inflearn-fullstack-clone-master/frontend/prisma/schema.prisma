// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?   @map("hashed_password")
  image          String?
  bio            String?
  phone          String?  @unique
  
  accounts          Account[]
  sessions          Session[]
  courses           Course[]
  courseEnrollments CourseEnrollment[]
  courseReviews     CourseReview[]
  courseQuestions   CourseQuestion[]
  courseComments    CourseComment[]
  lectureActivities LectureActivity[]
  courseFavorites   CourseFavorite[]
  cartItems         CartItem[]
  orders            Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Course {
  id               String   @id @default(uuid())
  slug             String   @unique
  title            String
  shortDescription String?  @map("short_description")
  description      String?  @map("description")
  thumbnailUrl     String?  @map("thumbnail_url")
  price            Int      @default(0)
  discountPrice    Int?     @map("discount_price")
  level            String   @default("BEGINEER")
  status           String   @default("DRAFT")
  instructorId     String   @map("instructor_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  sections          Section[]
  lectures          Lecture[]
  categories        CourseCategory[]
  enrollments       CourseEnrollment[]
  instructor        User               @relation(fields: [instructorId], references: [id])
  reviews           CourseReview[]
  questions         CourseQuestion[]
  favorites         CourseFavorite[]
  lectureActivities LectureActivity[]
  cartItems         CartItem[]
  orderItems        OrderItem[]

  @@map("courses")
}

model Section {
  id          String   @id @default(uuid())
  title       String
  description String?
  order       Int
  courseId    String   @map("course_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectures Lecture[]

  @@map("sections")
}

model Lecture {
  id               String   @id @default(uuid())
  title            String
  description      String?
  order            Int
  duration         Int?
  isPreview        Boolean  @default(false) @map("is_preview")
  sectionId        String   @map("section_id")
  courseId         String   @map("course_id")
  videoStorageInfo Json?    @map("video_storage_info")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  section    Section           @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  course     Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  activities LectureActivity[]

  @@map("lectures")
}

model CourseCategory {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  courses Course[]

  @@map("course_categories")
}

model CourseEnrollment {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  courseId   String   @map("course_id")
  enrolledAt DateTime @default(now()) @map("enrolled_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model CourseReview {
  id              String   @id @default(uuid())
  content         String
  rating          Int
  userId          String   @map("user_id")
  courseId        String   @map("course_id")
  instructorReply String?  @map("instructor_reply")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_reviews")
}

model CourseQuestion {
  id        String   @id @default(uuid())
  title     String
  content   String
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  course   Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments CourseComment[]

  @@map("course_questions")
}

model CourseComment {
  id         String   @id @default(uuid())
  content    String
  userId     String   @map("user_id")
  questionId String   @map("question_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  question CourseQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("course_comments")
}

model CourseFavorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_favorites")
}

model LectureActivity {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  courseId      String   @map("course_id")
  lectureId     String   @map("lecture_id")
  progress      Int      @default(0)
  duration      Int      @default(0)
  isCompleted   Boolean  @default(false) @map("is_completed")
  lastWatchedAt DateTime @default(now()) @map("last_watched_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lecture Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, lectureId])
  @@map("lecture_activities")
}

// 장바구니 아이템
model CartItem {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("cart_items")
}

// 주문
model Order {
  id             String   @id @default(uuid())
  orderNumber    String   @unique @map("order_number") // 주문번호 (표시용)
  userId         String   @map("user_id")
  totalAmount    Int      @map("total_amount") // 총 주문 금액
  discountAmount Int      @default(0) @map("discount_amount")
  finalAmount    Int      @map("final_amount") // 최종 주문 금액
  status         String   @default("PENDING") // PENDING, PAID, CANCELLED, FAILED
  customerName   String?  @map("customer_name")
  customerEmail  String?  @map("customer_email")
  customerPhone  String?  @map("customer_phone")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payments   Payment[]

  @@map("orders")
}

// 주문 아이템 모델
model OrderItem {
  id            String   @id @default(uuid())
  orderId       String   @map("order_id")
  courseId      String   @map("course_id")
  courseName    String   @map("course_name") // 주문 당시 강의명 (스냅샷)
  originalPrice Int      @map("original_price")
  discountPrice Int?     @map("discount_price")
  finalPrice    Int      @map("final_price")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// 결제 모델 (포트원 연동용)
model Payment {
  id                   String    @id @default(uuid())
  paymentId            String    @unique @map("payment_id") // 포트원 결제 ID
  orderId              String    @map("order_id")
  transactionId        String?   @map("transaction_id") // 포트원 거래 ID
  amount               Int       @map("amount")
  currency             String    @default("KRW") // 화폐
  paymentMethod        String    @map("payment_method") // 결제 수단 (CARD, VIRTUAL_ACCOUNT, etc)
  pgProvider           String?   @map("pg_provider") // PG사 (tosspayments, etc)
  status               String    @default("READY") // READY, PAID, FAILED, CANCELLED
  failureReason        String?   @map("failure_reason")
  paidAt               DateTime? @map("paid_at")
  cancelledAt          DateTime? @map("cancelled_at")
  // 가상계좌 정보
  virtualAccountNumber String?   @map("virtual_account_number")
  virtualAccountBank   String?   @map("virtual_account_bank")
  virtualAccountHolder String?   @map("virtual_account_holder")
  virtualAccountExpiry DateTime? @map("virtual_account_expiry")
  // 포트원 웹훅 정보
  portoneData          Json?     @map("portone_data") // 포트원에서 받은 전체 데이터
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}
